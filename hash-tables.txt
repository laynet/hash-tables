EXERCISES
1. What is a hash table?
-A data structure that stores value in a key and forms a key-value pair.
2. What is hashing?
-The conversion from a key to any type of numerical index.
3. How does a hash table store data?
-By using a hashing function to store the data in a hash table where it can be quickly retrieved by index
4. How are hash tables and objects different?
-Objects are organized by the type of data and hash tables are organized by the data key. It's sometimes acceptable to to use hash tables like objects and vice versa.
PROGRAMMING QUESTIONS
1.Create a hash table that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers.
let HashTable = function() {

var hash = (string, max) => {
 var hash = 0;
 for (var i = 0; i < string.length; i++) {
   hash += string.charCodeAt(i);
 }
 return hash % max;
};

 let storage = [];
 const storageLimit = 100;


 this.add = function(key,value) {
   var index = hash(key, storageLimit);
   if (storage[index] === undefined) {
     storage[index] = [
       [key,value]
     ];
   } else {
     var inserted = false;
     for (var i = 0; i < storage[index].length; i++) {
       if (storage[index][i][0] === key) {
         storage[index][i][1] = value;
         inserted = true;
       }
     }
     if (inserted === false) {
       storage[index].push([key,value]);
     }
   }
 }

this.lookup = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    }else {
      for (var i = 0; i < storage[index].length; i++) {
        if(storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  }
 };

var ht = new HashTable();
ht.add(5555555555,{name: "Layne", address: "4 street"})
console.log(ht.lookup(5555555555))
2.Create a hash table that allows a store owner to track their store's inventory and quantity.

var hash = (string, max) => {
 var hash = 0;
 for (var i = 0; i < string.length; i++) {
   hash += string.charCodeAt(i);
 }
 return hash % max;
};

let HashTable = function() {

 let storage = [];
 const storageLimit = 100;


 this.add = function(key,value) {
   var index = hash(key, storageLimit);
   if (storage[index] === undefined) {
     storage[index] = [
       [key,value]
     ];
   } else {
     var inserted = false;
     for (var i = 0; i < storage[index].length; i++) {
       if (storage[index][i][0] === key) {
         storage[index][i][1] = value;
         inserted = true;
       }
     }
     if (inserted === false) {
       storage[index].push([key,value]);
     }
   }
 }

this.lookup = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    }else {
      for (var i = 0; i < storage[index].length; i++) {
        if(storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  }
 };

 var ht = new HashTable();
 ht.add('inventory item 1', 3)
 ht.add('inventory item 2', 100)
 console.log(ht.lookup('inventory item 1'))
3.Create a hash table that allows digital copies of newspapers to be entered and searched by publisher and publication date.

var hash = (string, max) => {
 var hash = 0;
 for (var i = 0; i < string.length; i++) {
   hash += string.charCodeAt(i);
 }
 return hash % max;
};

class Newspaper {
  constructor() {
    this.storage = [];
    this.storageLimit = 10;
  }

  add(publisher, publicationDate) {
    let key = publisher + publicationDate;
    let index = hash(key, this.storageLimit);
    let val = [publisher, publicationDate]
    if(this.storage[index] === undefined) {
      this.storage[index] = [];
    }
    this.storage[index].push(val)
   }

   lookup(publisher, publicationDate) {
     let key = publisher + publicationDate;
     let index = hash(key, this.storageLimit);
     let result = [];

     if(!this.storage[index]) {
       return "entry not found"
     }
     this.storage[index].forEach(input => {
       if(input[0] === publisher && input[1] === publicationDate) {
         result.push(input);
       }
     })
     return result;
   }
}

let ht = new Newspaper();

ht.add('new yorker', '06.16.1985')
console.log(ht.lookup('new yorker'))